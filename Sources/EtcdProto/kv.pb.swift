// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kv.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Mvccpb_KeyValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// key is the key in bytes. An empty key is not allowed.
  public var key: Data = Data()

  /// create_revision is the revision of last creation on this key.
  public var createRevision: Int64 = 0

  /// mod_revision is the revision of last modification on this key.
  public var modRevision: Int64 = 0

  /// version is the version of the key. A deletion resets
  /// the version to zero and any modification of the key
  /// increases its version.
  public var version: Int64 = 0

  /// value is the value held by the key, in bytes.
  public var value: Data = Data()

  /// lease is the ID of the lease that attached to key.
  /// When the attached lease expires, the key will be deleted.
  /// If lease is 0, then no lease is attached to the key.
  public var lease: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Mvccpb_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// type is the kind of event. If type is a PUT, it indicates
  /// new data has been stored to the key. If type is a DELETE,
  /// it indicates the key was deleted.
  public var type: Mvccpb_Event.EventType = .put

  /// kv holds the KeyValue for the event.
  /// A PUT event contains current kv pair.
  /// A PUT event with kv.Version=1 indicates the creation of a key.
  /// A DELETE/EXPIRE event contains the deleted key with
  /// its modification revision set to the revision of deletion.
  public var kv: Mvccpb_KeyValue {
    get {return _kv ?? Mvccpb_KeyValue()}
    set {_kv = newValue}
  }
  /// Returns true if `kv` has been explicitly set.
  public var hasKv: Bool {return self._kv != nil}
  /// Clears the value of `kv`. Subsequent reads from it will return its default value.
  public mutating func clearKv() {self._kv = nil}

  /// prev_kv holds the key-value pair before the event happens.
  public var prevKv: Mvccpb_KeyValue {
    get {return _prevKv ?? Mvccpb_KeyValue()}
    set {_prevKv = newValue}
  }
  /// Returns true if `prevKv` has been explicitly set.
  public var hasPrevKv: Bool {return self._prevKv != nil}
  /// Clears the value of `prevKv`. Subsequent reads from it will return its default value.
  public mutating func clearPrevKv() {self._prevKv = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum EventType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case put // = 0
    case delete // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .put
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .put
      case 1: self = .delete
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .put: return 0
      case .delete: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _kv: Mvccpb_KeyValue? = nil
  fileprivate var _prevKv: Mvccpb_KeyValue? = nil
}

#if swift(>=4.2)

extension Mvccpb_Event.EventType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Mvccpb_Event.EventType] = [
    .put,
    .delete,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mvccpb"

extension Mvccpb_KeyValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KeyValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .standard(proto: "create_revision"),
    3: .standard(proto: "mod_revision"),
    4: .same(proto: "version"),
    5: .same(proto: "value"),
    6: .same(proto: "lease"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.createRevision) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.modRevision) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.version) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.lease) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 1)
    }
    if self.createRevision != 0 {
      try visitor.visitSingularInt64Field(value: self.createRevision, fieldNumber: 2)
    }
    if self.modRevision != 0 {
      try visitor.visitSingularInt64Field(value: self.modRevision, fieldNumber: 3)
    }
    if self.version != 0 {
      try visitor.visitSingularInt64Field(value: self.version, fieldNumber: 4)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 5)
    }
    if self.lease != 0 {
      try visitor.visitSingularInt64Field(value: self.lease, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mvccpb_KeyValue, rhs: Mvccpb_KeyValue) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.createRevision != rhs.createRevision {return false}
    if lhs.modRevision != rhs.modRevision {return false}
    if lhs.version != rhs.version {return false}
    if lhs.value != rhs.value {return false}
    if lhs.lease != rhs.lease {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mvccpb_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Event"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "kv"),
    3: .standard(proto: "prev_kv"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._kv) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._prevKv) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .put {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if let v = self._kv {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._prevKv {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mvccpb_Event, rhs: Mvccpb_Event) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._kv != rhs._kv {return false}
    if lhs._prevKv != rhs._prevKv {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mvccpb_Event.EventType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PUT"),
    1: .same(proto: "DELETE"),
  ]
}
