//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: election.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The election service exposes client-side election facilities as a gRPC interface.
///
/// Usage: instantiate `V3electionpb_ElectionClient`, then call methods of this protocol to make API calls.
public protocol V3electionpb_ElectionClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: V3electionpb_ElectionClientInterceptorFactoryProtocol? { get }

  func campaign(
    _ request: V3electionpb_CampaignRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<V3electionpb_CampaignRequest, V3electionpb_CampaignResponse>

  func proclaim(
    _ request: V3electionpb_ProclaimRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<V3electionpb_ProclaimRequest, V3electionpb_ProclaimResponse>

  func leader(
    _ request: V3electionpb_LeaderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<V3electionpb_LeaderRequest, V3electionpb_LeaderResponse>

  func observe(
    _ request: V3electionpb_LeaderRequest,
    callOptions: CallOptions?,
    handler: @escaping (V3electionpb_LeaderResponse) -> Void
  ) -> ServerStreamingCall<V3electionpb_LeaderRequest, V3electionpb_LeaderResponse>

  func resign(
    _ request: V3electionpb_ResignRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<V3electionpb_ResignRequest, V3electionpb_ResignResponse>
}

extension V3electionpb_ElectionClientProtocol {
  public var serviceName: String {
    return "v3electionpb.Election"
  }

  /// Campaign waits to acquire leadership in an election, returning a LeaderKey
  /// representing the leadership if successful. The LeaderKey can then be used
  /// to issue new values on the election, transactionally guard API requests on
  /// leadership still being held, and resign from the election.
  ///
  /// - Parameters:
  ///   - request: Request to send to Campaign.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func campaign(
    _ request: V3electionpb_CampaignRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V3electionpb_CampaignRequest, V3electionpb_CampaignResponse> {
    return self.makeUnaryCall(
      path: "/v3electionpb.Election/Campaign",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCampaignInterceptors() ?? []
    )
  }

  /// Proclaim updates the leader's posted value with a new value.
  ///
  /// - Parameters:
  ///   - request: Request to send to Proclaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func proclaim(
    _ request: V3electionpb_ProclaimRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V3electionpb_ProclaimRequest, V3electionpb_ProclaimResponse> {
    return self.makeUnaryCall(
      path: "/v3electionpb.Election/Proclaim",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProclaimInterceptors() ?? []
    )
  }

  /// Leader returns the current election proclamation, if any.
  ///
  /// - Parameters:
  ///   - request: Request to send to Leader.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func leader(
    _ request: V3electionpb_LeaderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V3electionpb_LeaderRequest, V3electionpb_LeaderResponse> {
    return self.makeUnaryCall(
      path: "/v3electionpb.Election/Leader",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaderInterceptors() ?? []
    )
  }

  /// Observe streams election proclamations in-order as made by the election's
  /// elected leaders.
  ///
  /// - Parameters:
  ///   - request: Request to send to Observe.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func observe(
    _ request: V3electionpb_LeaderRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (V3electionpb_LeaderResponse) -> Void
  ) -> ServerStreamingCall<V3electionpb_LeaderRequest, V3electionpb_LeaderResponse> {
    return self.makeServerStreamingCall(
      path: "/v3electionpb.Election/Observe",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeObserveInterceptors() ?? [],
      handler: handler
    )
  }

  /// Resign releases election leadership so other campaigners may acquire
  /// leadership on the election.
  ///
  /// - Parameters:
  ///   - request: Request to send to Resign.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func resign(
    _ request: V3electionpb_ResignRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V3electionpb_ResignRequest, V3electionpb_ResignResponse> {
    return self.makeUnaryCall(
      path: "/v3electionpb.Election/Resign",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResignInterceptors() ?? []
    )
  }
}

public protocol V3electionpb_ElectionClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'campaign'.
  func makeCampaignInterceptors() -> [ClientInterceptor<V3electionpb_CampaignRequest, V3electionpb_CampaignResponse>]

  /// - Returns: Interceptors to use when invoking 'proclaim'.
  func makeProclaimInterceptors() -> [ClientInterceptor<V3electionpb_ProclaimRequest, V3electionpb_ProclaimResponse>]

  /// - Returns: Interceptors to use when invoking 'leader'.
  func makeLeaderInterceptors() -> [ClientInterceptor<V3electionpb_LeaderRequest, V3electionpb_LeaderResponse>]

  /// - Returns: Interceptors to use when invoking 'observe'.
  func makeObserveInterceptors() -> [ClientInterceptor<V3electionpb_LeaderRequest, V3electionpb_LeaderResponse>]

  /// - Returns: Interceptors to use when invoking 'resign'.
  func makeResignInterceptors() -> [ClientInterceptor<V3electionpb_ResignRequest, V3electionpb_ResignResponse>]
}

public final class V3electionpb_ElectionClient: V3electionpb_ElectionClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: V3electionpb_ElectionClientInterceptorFactoryProtocol?

  /// Creates a client for the v3electionpb.Election service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: V3electionpb_ElectionClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The election service exposes client-side election facilities as a gRPC interface.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol V3electionpb_ElectionProvider: CallHandlerProvider {
  var interceptors: V3electionpb_ElectionServerInterceptorFactoryProtocol? { get }

  /// Campaign waits to acquire leadership in an election, returning a LeaderKey
  /// representing the leadership if successful. The LeaderKey can then be used
  /// to issue new values on the election, transactionally guard API requests on
  /// leadership still being held, and resign from the election.
  func campaign(request: V3electionpb_CampaignRequest, context: StatusOnlyCallContext) -> EventLoopFuture<V3electionpb_CampaignResponse>

  /// Proclaim updates the leader's posted value with a new value.
  func proclaim(request: V3electionpb_ProclaimRequest, context: StatusOnlyCallContext) -> EventLoopFuture<V3electionpb_ProclaimResponse>

  /// Leader returns the current election proclamation, if any.
  func leader(request: V3electionpb_LeaderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<V3electionpb_LeaderResponse>

  /// Observe streams election proclamations in-order as made by the election's
  /// elected leaders.
  func observe(request: V3electionpb_LeaderRequest, context: StreamingResponseCallContext<V3electionpb_LeaderResponse>) -> EventLoopFuture<GRPCStatus>

  /// Resign releases election leadership so other campaigners may acquire
  /// leadership on the election.
  func resign(request: V3electionpb_ResignRequest, context: StatusOnlyCallContext) -> EventLoopFuture<V3electionpb_ResignResponse>
}

extension V3electionpb_ElectionProvider {
  public var serviceName: Substring { return "v3electionpb.Election" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Campaign":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V3electionpb_CampaignRequest>(),
        responseSerializer: ProtobufSerializer<V3electionpb_CampaignResponse>(),
        interceptors: self.interceptors?.makeCampaignInterceptors() ?? [],
        userFunction: self.campaign(request:context:)
      )

    case "Proclaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V3electionpb_ProclaimRequest>(),
        responseSerializer: ProtobufSerializer<V3electionpb_ProclaimResponse>(),
        interceptors: self.interceptors?.makeProclaimInterceptors() ?? [],
        userFunction: self.proclaim(request:context:)
      )

    case "Leader":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V3electionpb_LeaderRequest>(),
        responseSerializer: ProtobufSerializer<V3electionpb_LeaderResponse>(),
        interceptors: self.interceptors?.makeLeaderInterceptors() ?? [],
        userFunction: self.leader(request:context:)
      )

    case "Observe":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V3electionpb_LeaderRequest>(),
        responseSerializer: ProtobufSerializer<V3electionpb_LeaderResponse>(),
        interceptors: self.interceptors?.makeObserveInterceptors() ?? [],
        userFunction: self.observe(request:context:)
      )

    case "Resign":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V3electionpb_ResignRequest>(),
        responseSerializer: ProtobufSerializer<V3electionpb_ResignResponse>(),
        interceptors: self.interceptors?.makeResignInterceptors() ?? [],
        userFunction: self.resign(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol V3electionpb_ElectionServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'campaign'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCampaignInterceptors() -> [ServerInterceptor<V3electionpb_CampaignRequest, V3electionpb_CampaignResponse>]

  /// - Returns: Interceptors to use when handling 'proclaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProclaimInterceptors() -> [ServerInterceptor<V3electionpb_ProclaimRequest, V3electionpb_ProclaimResponse>]

  /// - Returns: Interceptors to use when handling 'leader'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLeaderInterceptors() -> [ServerInterceptor<V3electionpb_LeaderRequest, V3electionpb_LeaderResponse>]

  /// - Returns: Interceptors to use when handling 'observe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeObserveInterceptors() -> [ServerInterceptor<V3electionpb_LeaderRequest, V3electionpb_LeaderResponse>]

  /// - Returns: Interceptors to use when handling 'resign'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResignInterceptors() -> [ServerInterceptor<V3electionpb_ResignRequest, V3electionpb_ResignResponse>]
}
