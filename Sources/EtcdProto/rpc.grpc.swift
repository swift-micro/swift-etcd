//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Etcdserverpb_KVClient`, then call methods of this protocol to make API calls.
public protocol Etcdserverpb_KVClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Etcdserverpb_KVClientInterceptorFactoryProtocol? { get }

  func range(
    _ request: Etcdserverpb_RangeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_RangeRequest, Etcdserverpb_RangeResponse>

  func put(
    _ request: Etcdserverpb_PutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_PutRequest, Etcdserverpb_PutResponse>

  func deleteRange(
    _ request: Etcdserverpb_DeleteRangeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_DeleteRangeRequest, Etcdserverpb_DeleteRangeResponse>

  func txn(
    _ request: Etcdserverpb_TxnRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_TxnRequest, Etcdserverpb_TxnResponse>

  func compact(
    _ request: Etcdserverpb_CompactionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_CompactionRequest, Etcdserverpb_CompactionResponse>
}

extension Etcdserverpb_KVClientProtocol {
  public var serviceName: String {
    return "etcdserverpb.KV"
  }

  /// Range gets the keys in the range from the key-value store.
  ///
  /// - Parameters:
  ///   - request: Request to send to Range.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func range(
    _ request: Etcdserverpb_RangeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_RangeRequest, Etcdserverpb_RangeResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.KV/Range",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRangeInterceptors() ?? []
    )
  }

  /// Put puts the given key into the key-value store.
  /// A put request increments the revision of the key-value store
  /// and generates one event in the event history.
  ///
  /// - Parameters:
  ///   - request: Request to send to Put.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func put(
    _ request: Etcdserverpb_PutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_PutRequest, Etcdserverpb_PutResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.KV/Put",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePutInterceptors() ?? []
    )
  }

  /// DeleteRange deletes the given range from the key-value store.
  /// A delete request increments the revision of the key-value store
  /// and generates a delete event in the event history for every deleted key.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteRange.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteRange(
    _ request: Etcdserverpb_DeleteRangeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_DeleteRangeRequest, Etcdserverpb_DeleteRangeResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.KV/DeleteRange",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteRangeInterceptors() ?? []
    )
  }

  /// Txn processes multiple requests in a single transaction.
  /// A txn request increments the revision of the key-value store
  /// and generates events with the same revision for every completed request.
  /// It is not allowed to modify the same key several times within one txn.
  ///
  /// - Parameters:
  ///   - request: Request to send to Txn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func txn(
    _ request: Etcdserverpb_TxnRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_TxnRequest, Etcdserverpb_TxnResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.KV/Txn",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxnInterceptors() ?? []
    )
  }

  /// Compact compacts the event history in the etcd key-value store. The key-value
  /// store should be periodically compacted or the event history will continue to grow
  /// indefinitely.
  ///
  /// - Parameters:
  ///   - request: Request to send to Compact.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func compact(
    _ request: Etcdserverpb_CompactionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_CompactionRequest, Etcdserverpb_CompactionResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.KV/Compact",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompactInterceptors() ?? []
    )
  }
}

public protocol Etcdserverpb_KVClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'range'.
  func makeRangeInterceptors() -> [ClientInterceptor<Etcdserverpb_RangeRequest, Etcdserverpb_RangeResponse>]

  /// - Returns: Interceptors to use when invoking 'put'.
  func makePutInterceptors() -> [ClientInterceptor<Etcdserverpb_PutRequest, Etcdserverpb_PutResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteRange'.
  func makeDeleteRangeInterceptors() -> [ClientInterceptor<Etcdserverpb_DeleteRangeRequest, Etcdserverpb_DeleteRangeResponse>]

  /// - Returns: Interceptors to use when invoking 'txn'.
  func makeTxnInterceptors() -> [ClientInterceptor<Etcdserverpb_TxnRequest, Etcdserverpb_TxnResponse>]

  /// - Returns: Interceptors to use when invoking 'compact'.
  func makeCompactInterceptors() -> [ClientInterceptor<Etcdserverpb_CompactionRequest, Etcdserverpb_CompactionResponse>]
}

public final class Etcdserverpb_KVClient: Etcdserverpb_KVClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Etcdserverpb_KVClientInterceptorFactoryProtocol?

  /// Creates a client for the etcdserverpb.KV service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Etcdserverpb_KVClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Etcdserverpb_WatchClient`, then call methods of this protocol to make API calls.
public protocol Etcdserverpb_WatchClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Etcdserverpb_WatchClientInterceptorFactoryProtocol? { get }

  func progress(
    _ request: Etcdserverpb_WatchProgressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_WatchProgressRequest, Etcdserverpb_WatchResponse>

  func watch(
    callOptions: CallOptions?,
    handler: @escaping (Etcdserverpb_WatchResponse) -> Void
  ) -> BidirectionalStreamingCall<Etcdserverpb_WatchRequest, Etcdserverpb_WatchResponse>
}

extension Etcdserverpb_WatchClientProtocol {
  public var serviceName: String {
    return "etcdserverpb.Watch"
  }

  /// Progress requests that a watch stream progress status
  /// be sent in the watch response stream as soon as possible.
  /// For watch progress responses, the header.revision indicates progress. All future events
  /// received in this stream are guaranteed to have a higher revision number than the
  /// header.revision number.
  ///
  /// - Parameters:
  ///   - request: Request to send to Progress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func progress(
    _ request: Etcdserverpb_WatchProgressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_WatchProgressRequest, Etcdserverpb_WatchResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Watch/Progress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProgressInterceptors() ?? []
    )
  }

  /// Watch watches for events happening or that have happened. Both input and output
  /// are streams; the input stream is for creating and canceling watchers and the output
  /// stream sends events. One watch RPC can watch on multiple key ranges, streaming events
  /// for several watches at once. The entire event history can be watched starting from the
  /// last compaction revision.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func watch(
    callOptions: CallOptions? = nil,
    handler: @escaping (Etcdserverpb_WatchResponse) -> Void
  ) -> BidirectionalStreamingCall<Etcdserverpb_WatchRequest, Etcdserverpb_WatchResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/etcdserverpb.Watch/Watch",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWatchInterceptors() ?? [],
      handler: handler
    )
  }
}

public protocol Etcdserverpb_WatchClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'progress'.
  func makeProgressInterceptors() -> [ClientInterceptor<Etcdserverpb_WatchProgressRequest, Etcdserverpb_WatchResponse>]

  /// - Returns: Interceptors to use when invoking 'watch'.
  func makeWatchInterceptors() -> [ClientInterceptor<Etcdserverpb_WatchRequest, Etcdserverpb_WatchResponse>]
}

public final class Etcdserverpb_WatchClient: Etcdserverpb_WatchClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Etcdserverpb_WatchClientInterceptorFactoryProtocol?

  /// Creates a client for the etcdserverpb.Watch service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Etcdserverpb_WatchClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Etcdserverpb_LeaseClient`, then call methods of this protocol to make API calls.
public protocol Etcdserverpb_LeaseClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Etcdserverpb_LeaseClientInterceptorFactoryProtocol? { get }

  func leaseGrant(
    _ request: Etcdserverpb_LeaseGrantRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_LeaseGrantRequest, Etcdserverpb_LeaseGrantResponse>

  func leaseRevoke(
    _ request: Etcdserverpb_LeaseRevokeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_LeaseRevokeRequest, Etcdserverpb_LeaseRevokeResponse>

  func leaseKeepAlive(
    callOptions: CallOptions?,
    handler: @escaping (Etcdserverpb_LeaseKeepAliveResponse) -> Void
  ) -> BidirectionalStreamingCall<Etcdserverpb_LeaseKeepAliveRequest, Etcdserverpb_LeaseKeepAliveResponse>

  func leaseTimeToLive(
    _ request: Etcdserverpb_LeaseTimeToLiveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_LeaseTimeToLiveRequest, Etcdserverpb_LeaseTimeToLiveResponse>
}

extension Etcdserverpb_LeaseClientProtocol {
  public var serviceName: String {
    return "etcdserverpb.Lease"
  }

  /// LeaseGrant creates a lease which expires if the server does not receive a keepAlive
  /// within a given time to live period. All keys attached to the lease will be expired and
  /// deleted if the lease expires. Each expired key generates a delete event in the event history.
  ///
  /// - Parameters:
  ///   - request: Request to send to LeaseGrant.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func leaseGrant(
    _ request: Etcdserverpb_LeaseGrantRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_LeaseGrantRequest, Etcdserverpb_LeaseGrantResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Lease/LeaseGrant",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaseGrantInterceptors() ?? []
    )
  }

  /// LeaseRevoke revokes a lease. All keys attached to the lease will expire and be deleted.
  ///
  /// - Parameters:
  ///   - request: Request to send to LeaseRevoke.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func leaseRevoke(
    _ request: Etcdserverpb_LeaseRevokeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_LeaseRevokeRequest, Etcdserverpb_LeaseRevokeResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Lease/LeaseRevoke",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaseRevokeInterceptors() ?? []
    )
  }

  /// LeaseKeepAlive keeps the lease alive by streaming keep alive requests from the client
  /// to the server and streaming keep alive responses from the server to the client.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func leaseKeepAlive(
    callOptions: CallOptions? = nil,
    handler: @escaping (Etcdserverpb_LeaseKeepAliveResponse) -> Void
  ) -> BidirectionalStreamingCall<Etcdserverpb_LeaseKeepAliveRequest, Etcdserverpb_LeaseKeepAliveResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/etcdserverpb.Lease/LeaseKeepAlive",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaseKeepAliveInterceptors() ?? [],
      handler: handler
    )
  }

  /// LeaseTimeToLive retrieves lease information.
  ///
  /// - Parameters:
  ///   - request: Request to send to LeaseTimeToLive.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func leaseTimeToLive(
    _ request: Etcdserverpb_LeaseTimeToLiveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_LeaseTimeToLiveRequest, Etcdserverpb_LeaseTimeToLiveResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Lease/LeaseTimeToLive",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaseTimeToLiveInterceptors() ?? []
    )
  }
}

public protocol Etcdserverpb_LeaseClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'leaseGrant'.
  func makeLeaseGrantInterceptors() -> [ClientInterceptor<Etcdserverpb_LeaseGrantRequest, Etcdserverpb_LeaseGrantResponse>]

  /// - Returns: Interceptors to use when invoking 'leaseRevoke'.
  func makeLeaseRevokeInterceptors() -> [ClientInterceptor<Etcdserverpb_LeaseRevokeRequest, Etcdserverpb_LeaseRevokeResponse>]

  /// - Returns: Interceptors to use when invoking 'leaseKeepAlive'.
  func makeLeaseKeepAliveInterceptors() -> [ClientInterceptor<Etcdserverpb_LeaseKeepAliveRequest, Etcdserverpb_LeaseKeepAliveResponse>]

  /// - Returns: Interceptors to use when invoking 'leaseTimeToLive'.
  func makeLeaseTimeToLiveInterceptors() -> [ClientInterceptor<Etcdserverpb_LeaseTimeToLiveRequest, Etcdserverpb_LeaseTimeToLiveResponse>]
}

public final class Etcdserverpb_LeaseClient: Etcdserverpb_LeaseClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Etcdserverpb_LeaseClientInterceptorFactoryProtocol?

  /// Creates a client for the etcdserverpb.Lease service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Etcdserverpb_LeaseClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Etcdserverpb_ClusterClient`, then call methods of this protocol to make API calls.
public protocol Etcdserverpb_ClusterClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Etcdserverpb_ClusterClientInterceptorFactoryProtocol? { get }

  func memberAdd(
    _ request: Etcdserverpb_MemberAddRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_MemberAddRequest, Etcdserverpb_MemberAddResponse>

  func memberRemove(
    _ request: Etcdserverpb_MemberRemoveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_MemberRemoveRequest, Etcdserverpb_MemberRemoveResponse>

  func memberUpdate(
    _ request: Etcdserverpb_MemberUpdateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_MemberUpdateRequest, Etcdserverpb_MemberUpdateResponse>

  func memberList(
    _ request: Etcdserverpb_MemberListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_MemberListRequest, Etcdserverpb_MemberListResponse>
}

extension Etcdserverpb_ClusterClientProtocol {
  public var serviceName: String {
    return "etcdserverpb.Cluster"
  }

  /// MemberAdd adds a member into the cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to MemberAdd.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func memberAdd(
    _ request: Etcdserverpb_MemberAddRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_MemberAddRequest, Etcdserverpb_MemberAddResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Cluster/MemberAdd",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMemberAddInterceptors() ?? []
    )
  }

  /// MemberRemove removes an existing member from the cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to MemberRemove.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func memberRemove(
    _ request: Etcdserverpb_MemberRemoveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_MemberRemoveRequest, Etcdserverpb_MemberRemoveResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Cluster/MemberRemove",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMemberRemoveInterceptors() ?? []
    )
  }

  /// MemberUpdate updates the member configuration.
  ///
  /// - Parameters:
  ///   - request: Request to send to MemberUpdate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func memberUpdate(
    _ request: Etcdserverpb_MemberUpdateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_MemberUpdateRequest, Etcdserverpb_MemberUpdateResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Cluster/MemberUpdate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMemberUpdateInterceptors() ?? []
    )
  }

  /// MemberList lists all the members in the cluster.
  ///
  /// - Parameters:
  ///   - request: Request to send to MemberList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func memberList(
    _ request: Etcdserverpb_MemberListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_MemberListRequest, Etcdserverpb_MemberListResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Cluster/MemberList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMemberListInterceptors() ?? []
    )
  }
}

public protocol Etcdserverpb_ClusterClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'memberAdd'.
  func makeMemberAddInterceptors() -> [ClientInterceptor<Etcdserverpb_MemberAddRequest, Etcdserverpb_MemberAddResponse>]

  /// - Returns: Interceptors to use when invoking 'memberRemove'.
  func makeMemberRemoveInterceptors() -> [ClientInterceptor<Etcdserverpb_MemberRemoveRequest, Etcdserverpb_MemberRemoveResponse>]

  /// - Returns: Interceptors to use when invoking 'memberUpdate'.
  func makeMemberUpdateInterceptors() -> [ClientInterceptor<Etcdserverpb_MemberUpdateRequest, Etcdserverpb_MemberUpdateResponse>]

  /// - Returns: Interceptors to use when invoking 'memberList'.
  func makeMemberListInterceptors() -> [ClientInterceptor<Etcdserverpb_MemberListRequest, Etcdserverpb_MemberListResponse>]
}

public final class Etcdserverpb_ClusterClient: Etcdserverpb_ClusterClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Etcdserverpb_ClusterClientInterceptorFactoryProtocol?

  /// Creates a client for the etcdserverpb.Cluster service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Etcdserverpb_ClusterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Etcdserverpb_MaintenanceClient`, then call methods of this protocol to make API calls.
public protocol Etcdserverpb_MaintenanceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Etcdserverpb_MaintenanceClientInterceptorFactoryProtocol? { get }

  func alarm(
    _ request: Etcdserverpb_AlarmRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AlarmRequest, Etcdserverpb_AlarmResponse>

  func status(
    _ request: Etcdserverpb_StatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_StatusRequest, Etcdserverpb_StatusResponse>

  func defragment(
    _ request: Etcdserverpb_DefragmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_DefragmentRequest, Etcdserverpb_DefragmentResponse>

  func hash(
    _ request: Etcdserverpb_HashRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_HashRequest, Etcdserverpb_HashResponse>

  func hashKV(
    _ request: Etcdserverpb_HashKVRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_HashKVRequest, Etcdserverpb_HashKVResponse>

  func snapshot(
    _ request: Etcdserverpb_SnapshotRequest,
    callOptions: CallOptions?,
    handler: @escaping (Etcdserverpb_SnapshotResponse) -> Void
  ) -> ServerStreamingCall<Etcdserverpb_SnapshotRequest, Etcdserverpb_SnapshotResponse>

  func moveLeader(
    _ request: Etcdserverpb_MoveLeaderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_MoveLeaderRequest, Etcdserverpb_MoveLeaderResponse>
}

extension Etcdserverpb_MaintenanceClientProtocol {
  public var serviceName: String {
    return "etcdserverpb.Maintenance"
  }

  /// Alarm activates, deactivates, and queries alarms regarding cluster health.
  ///
  /// - Parameters:
  ///   - request: Request to send to Alarm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func alarm(
    _ request: Etcdserverpb_AlarmRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AlarmRequest, Etcdserverpb_AlarmResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Maintenance/Alarm",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAlarmInterceptors() ?? []
    )
  }

  /// Status gets the status of the member.
  ///
  /// - Parameters:
  ///   - request: Request to send to Status.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func status(
    _ request: Etcdserverpb_StatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_StatusRequest, Etcdserverpb_StatusResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Maintenance/Status",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusInterceptors() ?? []
    )
  }

  /// Defragment defragments a member's backend database to recover storage space.
  ///
  /// - Parameters:
  ///   - request: Request to send to Defragment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func defragment(
    _ request: Etcdserverpb_DefragmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_DefragmentRequest, Etcdserverpb_DefragmentResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Maintenance/Defragment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDefragmentInterceptors() ?? []
    )
  }

  /// Hash returns the hash of the local KV state for consistency checking purpose.
  /// This is designed for testing; do not use this in production when there
  /// are ongoing transactions.
  ///
  /// - Parameters:
  ///   - request: Request to send to Hash.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func hash(
    _ request: Etcdserverpb_HashRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_HashRequest, Etcdserverpb_HashResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Maintenance/Hash",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHashInterceptors() ?? []
    )
  }

  /// HashKV computes the hash of all MVCC keys up to a given revision.
  ///
  /// - Parameters:
  ///   - request: Request to send to HashKV.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func hashKV(
    _ request: Etcdserverpb_HashKVRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_HashKVRequest, Etcdserverpb_HashKVResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Maintenance/HashKV",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHashKVInterceptors() ?? []
    )
  }

  /// Snapshot sends a snapshot of the entire backend from a member over a stream to a client.
  ///
  /// - Parameters:
  ///   - request: Request to send to Snapshot.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func snapshot(
    _ request: Etcdserverpb_SnapshotRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Etcdserverpb_SnapshotResponse) -> Void
  ) -> ServerStreamingCall<Etcdserverpb_SnapshotRequest, Etcdserverpb_SnapshotResponse> {
    return self.makeServerStreamingCall(
      path: "/etcdserverpb.Maintenance/Snapshot",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSnapshotInterceptors() ?? [],
      handler: handler
    )
  }

  /// MoveLeader requests current leader node to transfer its leadership to transferee.
  ///
  /// - Parameters:
  ///   - request: Request to send to MoveLeader.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func moveLeader(
    _ request: Etcdserverpb_MoveLeaderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_MoveLeaderRequest, Etcdserverpb_MoveLeaderResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Maintenance/MoveLeader",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMoveLeaderInterceptors() ?? []
    )
  }
}

public protocol Etcdserverpb_MaintenanceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'alarm'.
  func makeAlarmInterceptors() -> [ClientInterceptor<Etcdserverpb_AlarmRequest, Etcdserverpb_AlarmResponse>]

  /// - Returns: Interceptors to use when invoking 'status'.
  func makeStatusInterceptors() -> [ClientInterceptor<Etcdserverpb_StatusRequest, Etcdserverpb_StatusResponse>]

  /// - Returns: Interceptors to use when invoking 'defragment'.
  func makeDefragmentInterceptors() -> [ClientInterceptor<Etcdserverpb_DefragmentRequest, Etcdserverpb_DefragmentResponse>]

  /// - Returns: Interceptors to use when invoking 'hash'.
  func makeHashInterceptors() -> [ClientInterceptor<Etcdserverpb_HashRequest, Etcdserverpb_HashResponse>]

  /// - Returns: Interceptors to use when invoking 'hashKV'.
  func makeHashKVInterceptors() -> [ClientInterceptor<Etcdserverpb_HashKVRequest, Etcdserverpb_HashKVResponse>]

  /// - Returns: Interceptors to use when invoking 'snapshot'.
  func makeSnapshotInterceptors() -> [ClientInterceptor<Etcdserverpb_SnapshotRequest, Etcdserverpb_SnapshotResponse>]

  /// - Returns: Interceptors to use when invoking 'moveLeader'.
  func makeMoveLeaderInterceptors() -> [ClientInterceptor<Etcdserverpb_MoveLeaderRequest, Etcdserverpb_MoveLeaderResponse>]
}

public final class Etcdserverpb_MaintenanceClient: Etcdserverpb_MaintenanceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Etcdserverpb_MaintenanceClientInterceptorFactoryProtocol?

  /// Creates a client for the etcdserverpb.Maintenance service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Etcdserverpb_MaintenanceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Etcdserverpb_AuthClient`, then call methods of this protocol to make API calls.
public protocol Etcdserverpb_AuthClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Etcdserverpb_AuthClientInterceptorFactoryProtocol? { get }

  func authEnable(
    _ request: Etcdserverpb_AuthEnableRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthEnableRequest, Etcdserverpb_AuthEnableResponse>

  func authDisable(
    _ request: Etcdserverpb_AuthDisableRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthDisableRequest, Etcdserverpb_AuthDisableResponse>

  func authenticate(
    _ request: Etcdserverpb_AuthenticateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthenticateRequest, Etcdserverpb_AuthenticateResponse>

  func userAdd(
    _ request: Etcdserverpb_AuthUserAddRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthUserAddRequest, Etcdserverpb_AuthUserAddResponse>

  func userGet(
    _ request: Etcdserverpb_AuthUserGetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthUserGetRequest, Etcdserverpb_AuthUserGetResponse>

  func userList(
    _ request: Etcdserverpb_AuthUserListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthUserListRequest, Etcdserverpb_AuthUserListResponse>

  func userDelete(
    _ request: Etcdserverpb_AuthUserDeleteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthUserDeleteRequest, Etcdserverpb_AuthUserDeleteResponse>

  func userChangePassword(
    _ request: Etcdserverpb_AuthUserChangePasswordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthUserChangePasswordRequest, Etcdserverpb_AuthUserChangePasswordResponse>

  func userGrantRole(
    _ request: Etcdserverpb_AuthUserGrantRoleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthUserGrantRoleRequest, Etcdserverpb_AuthUserGrantRoleResponse>

  func userRevokeRole(
    _ request: Etcdserverpb_AuthUserRevokeRoleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthUserRevokeRoleRequest, Etcdserverpb_AuthUserRevokeRoleResponse>

  func roleAdd(
    _ request: Etcdserverpb_AuthRoleAddRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthRoleAddRequest, Etcdserverpb_AuthRoleAddResponse>

  func roleGet(
    _ request: Etcdserverpb_AuthRoleGetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthRoleGetRequest, Etcdserverpb_AuthRoleGetResponse>

  func roleList(
    _ request: Etcdserverpb_AuthRoleListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthRoleListRequest, Etcdserverpb_AuthRoleListResponse>

  func roleDelete(
    _ request: Etcdserverpb_AuthRoleDeleteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthRoleDeleteRequest, Etcdserverpb_AuthRoleDeleteResponse>

  func roleGrantPermission(
    _ request: Etcdserverpb_AuthRoleGrantPermissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthRoleGrantPermissionRequest, Etcdserverpb_AuthRoleGrantPermissionResponse>

  func roleRevokePermission(
    _ request: Etcdserverpb_AuthRoleRevokePermissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Etcdserverpb_AuthRoleRevokePermissionRequest, Etcdserverpb_AuthRoleRevokePermissionResponse>
}

extension Etcdserverpb_AuthClientProtocol {
  public var serviceName: String {
    return "etcdserverpb.Auth"
  }

  /// AuthEnable enables authentication.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthEnable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func authEnable(
    _ request: Etcdserverpb_AuthEnableRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthEnableRequest, Etcdserverpb_AuthEnableResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/AuthEnable",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthEnableInterceptors() ?? []
    )
  }

  /// AuthDisable disables authentication.
  ///
  /// - Parameters:
  ///   - request: Request to send to AuthDisable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func authDisable(
    _ request: Etcdserverpb_AuthDisableRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthDisableRequest, Etcdserverpb_AuthDisableResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/AuthDisable",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthDisableInterceptors() ?? []
    )
  }

  /// Authenticate processes an authenticate request.
  ///
  /// - Parameters:
  ///   - request: Request to send to Authenticate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func authenticate(
    _ request: Etcdserverpb_AuthenticateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthenticateRequest, Etcdserverpb_AuthenticateResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/Authenticate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? []
    )
  }

  /// UserAdd adds a new user.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserAdd.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func userAdd(
    _ request: Etcdserverpb_AuthUserAddRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthUserAddRequest, Etcdserverpb_AuthUserAddResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/UserAdd",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserAddInterceptors() ?? []
    )
  }

  /// UserGet gets detailed user information.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserGet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func userGet(
    _ request: Etcdserverpb_AuthUserGetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthUserGetRequest, Etcdserverpb_AuthUserGetResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/UserGet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserGetInterceptors() ?? []
    )
  }

  /// UserList gets a list of all users.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func userList(
    _ request: Etcdserverpb_AuthUserListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthUserListRequest, Etcdserverpb_AuthUserListResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/UserList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserListInterceptors() ?? []
    )
  }

  /// UserDelete deletes a specified user.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserDelete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func userDelete(
    _ request: Etcdserverpb_AuthUserDeleteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthUserDeleteRequest, Etcdserverpb_AuthUserDeleteResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/UserDelete",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserDeleteInterceptors() ?? []
    )
  }

  /// UserChangePassword changes the password of a specified user.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserChangePassword.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func userChangePassword(
    _ request: Etcdserverpb_AuthUserChangePasswordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthUserChangePasswordRequest, Etcdserverpb_AuthUserChangePasswordResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/UserChangePassword",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserChangePasswordInterceptors() ?? []
    )
  }

  /// UserGrant grants a role to a specified user.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserGrantRole.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func userGrantRole(
    _ request: Etcdserverpb_AuthUserGrantRoleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthUserGrantRoleRequest, Etcdserverpb_AuthUserGrantRoleResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/UserGrantRole",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserGrantRoleInterceptors() ?? []
    )
  }

  /// UserRevokeRole revokes a role of specified user.
  ///
  /// - Parameters:
  ///   - request: Request to send to UserRevokeRole.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func userRevokeRole(
    _ request: Etcdserverpb_AuthUserRevokeRoleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthUserRevokeRoleRequest, Etcdserverpb_AuthUserRevokeRoleResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/UserRevokeRole",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserRevokeRoleInterceptors() ?? []
    )
  }

  /// RoleAdd adds a new role.
  ///
  /// - Parameters:
  ///   - request: Request to send to RoleAdd.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func roleAdd(
    _ request: Etcdserverpb_AuthRoleAddRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthRoleAddRequest, Etcdserverpb_AuthRoleAddResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/RoleAdd",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRoleAddInterceptors() ?? []
    )
  }

  /// RoleGet gets detailed role information.
  ///
  /// - Parameters:
  ///   - request: Request to send to RoleGet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func roleGet(
    _ request: Etcdserverpb_AuthRoleGetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthRoleGetRequest, Etcdserverpb_AuthRoleGetResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/RoleGet",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRoleGetInterceptors() ?? []
    )
  }

  /// RoleList gets lists of all roles.
  ///
  /// - Parameters:
  ///   - request: Request to send to RoleList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func roleList(
    _ request: Etcdserverpb_AuthRoleListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthRoleListRequest, Etcdserverpb_AuthRoleListResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/RoleList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRoleListInterceptors() ?? []
    )
  }

  /// RoleDelete deletes a specified role.
  ///
  /// - Parameters:
  ///   - request: Request to send to RoleDelete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func roleDelete(
    _ request: Etcdserverpb_AuthRoleDeleteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthRoleDeleteRequest, Etcdserverpb_AuthRoleDeleteResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/RoleDelete",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRoleDeleteInterceptors() ?? []
    )
  }

  /// RoleGrantPermission grants a permission of a specified key or range to a specified role.
  ///
  /// - Parameters:
  ///   - request: Request to send to RoleGrantPermission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func roleGrantPermission(
    _ request: Etcdserverpb_AuthRoleGrantPermissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthRoleGrantPermissionRequest, Etcdserverpb_AuthRoleGrantPermissionResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/RoleGrantPermission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRoleGrantPermissionInterceptors() ?? []
    )
  }

  /// RoleRevokePermission revokes a key or range permission of a specified role.
  ///
  /// - Parameters:
  ///   - request: Request to send to RoleRevokePermission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func roleRevokePermission(
    _ request: Etcdserverpb_AuthRoleRevokePermissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Etcdserverpb_AuthRoleRevokePermissionRequest, Etcdserverpb_AuthRoleRevokePermissionResponse> {
    return self.makeUnaryCall(
      path: "/etcdserverpb.Auth/RoleRevokePermission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRoleRevokePermissionInterceptors() ?? []
    )
  }
}

public protocol Etcdserverpb_AuthClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'authEnable'.
  func makeAuthEnableInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthEnableRequest, Etcdserverpb_AuthEnableResponse>]

  /// - Returns: Interceptors to use when invoking 'authDisable'.
  func makeAuthDisableInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthDisableRequest, Etcdserverpb_AuthDisableResponse>]

  /// - Returns: Interceptors to use when invoking 'authenticate'.
  func makeAuthenticateInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthenticateRequest, Etcdserverpb_AuthenticateResponse>]

  /// - Returns: Interceptors to use when invoking 'userAdd'.
  func makeUserAddInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthUserAddRequest, Etcdserverpb_AuthUserAddResponse>]

  /// - Returns: Interceptors to use when invoking 'userGet'.
  func makeUserGetInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthUserGetRequest, Etcdserverpb_AuthUserGetResponse>]

  /// - Returns: Interceptors to use when invoking 'userList'.
  func makeUserListInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthUserListRequest, Etcdserverpb_AuthUserListResponse>]

  /// - Returns: Interceptors to use when invoking 'userDelete'.
  func makeUserDeleteInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthUserDeleteRequest, Etcdserverpb_AuthUserDeleteResponse>]

  /// - Returns: Interceptors to use when invoking 'userChangePassword'.
  func makeUserChangePasswordInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthUserChangePasswordRequest, Etcdserverpb_AuthUserChangePasswordResponse>]

  /// - Returns: Interceptors to use when invoking 'userGrantRole'.
  func makeUserGrantRoleInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthUserGrantRoleRequest, Etcdserverpb_AuthUserGrantRoleResponse>]

  /// - Returns: Interceptors to use when invoking 'userRevokeRole'.
  func makeUserRevokeRoleInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthUserRevokeRoleRequest, Etcdserverpb_AuthUserRevokeRoleResponse>]

  /// - Returns: Interceptors to use when invoking 'roleAdd'.
  func makeRoleAddInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthRoleAddRequest, Etcdserverpb_AuthRoleAddResponse>]

  /// - Returns: Interceptors to use when invoking 'roleGet'.
  func makeRoleGetInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthRoleGetRequest, Etcdserverpb_AuthRoleGetResponse>]

  /// - Returns: Interceptors to use when invoking 'roleList'.
  func makeRoleListInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthRoleListRequest, Etcdserverpb_AuthRoleListResponse>]

  /// - Returns: Interceptors to use when invoking 'roleDelete'.
  func makeRoleDeleteInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthRoleDeleteRequest, Etcdserverpb_AuthRoleDeleteResponse>]

  /// - Returns: Interceptors to use when invoking 'roleGrantPermission'.
  func makeRoleGrantPermissionInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthRoleGrantPermissionRequest, Etcdserverpb_AuthRoleGrantPermissionResponse>]

  /// - Returns: Interceptors to use when invoking 'roleRevokePermission'.
  func makeRoleRevokePermissionInterceptors() -> [ClientInterceptor<Etcdserverpb_AuthRoleRevokePermissionRequest, Etcdserverpb_AuthRoleRevokePermissionResponse>]
}

public final class Etcdserverpb_AuthClient: Etcdserverpb_AuthClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Etcdserverpb_AuthClientInterceptorFactoryProtocol?

  /// Creates a client for the etcdserverpb.Auth service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Etcdserverpb_AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Etcdserverpb_KVProvider: CallHandlerProvider {
  var interceptors: Etcdserverpb_KVServerInterceptorFactoryProtocol? { get }

  /// Range gets the keys in the range from the key-value store.
  func range(request: Etcdserverpb_RangeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_RangeResponse>

  /// Put puts the given key into the key-value store.
  /// A put request increments the revision of the key-value store
  /// and generates one event in the event history.
  func put(request: Etcdserverpb_PutRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_PutResponse>

  /// DeleteRange deletes the given range from the key-value store.
  /// A delete request increments the revision of the key-value store
  /// and generates a delete event in the event history for every deleted key.
  func deleteRange(request: Etcdserverpb_DeleteRangeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_DeleteRangeResponse>

  /// Txn processes multiple requests in a single transaction.
  /// A txn request increments the revision of the key-value store
  /// and generates events with the same revision for every completed request.
  /// It is not allowed to modify the same key several times within one txn.
  func txn(request: Etcdserverpb_TxnRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_TxnResponse>

  /// Compact compacts the event history in the etcd key-value store. The key-value
  /// store should be periodically compacted or the event history will continue to grow
  /// indefinitely.
  func compact(request: Etcdserverpb_CompactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_CompactionResponse>
}

extension Etcdserverpb_KVProvider {
  public var serviceName: Substring { return "etcdserverpb.KV" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Range":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_RangeRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_RangeResponse>(),
        interceptors: self.interceptors?.makeRangeInterceptors() ?? [],
        userFunction: self.range(request:context:)
      )

    case "Put":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_PutRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_PutResponse>(),
        interceptors: self.interceptors?.makePutInterceptors() ?? [],
        userFunction: self.put(request:context:)
      )

    case "DeleteRange":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_DeleteRangeRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_DeleteRangeResponse>(),
        interceptors: self.interceptors?.makeDeleteRangeInterceptors() ?? [],
        userFunction: self.deleteRange(request:context:)
      )

    case "Txn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_TxnRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_TxnResponse>(),
        interceptors: self.interceptors?.makeTxnInterceptors() ?? [],
        userFunction: self.txn(request:context:)
      )

    case "Compact":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_CompactionRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_CompactionResponse>(),
        interceptors: self.interceptors?.makeCompactInterceptors() ?? [],
        userFunction: self.compact(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Etcdserverpb_KVServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'range'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRangeInterceptors() -> [ServerInterceptor<Etcdserverpb_RangeRequest, Etcdserverpb_RangeResponse>]

  /// - Returns: Interceptors to use when handling 'put'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePutInterceptors() -> [ServerInterceptor<Etcdserverpb_PutRequest, Etcdserverpb_PutResponse>]

  /// - Returns: Interceptors to use when handling 'deleteRange'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteRangeInterceptors() -> [ServerInterceptor<Etcdserverpb_DeleteRangeRequest, Etcdserverpb_DeleteRangeResponse>]

  /// - Returns: Interceptors to use when handling 'txn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTxnInterceptors() -> [ServerInterceptor<Etcdserverpb_TxnRequest, Etcdserverpb_TxnResponse>]

  /// - Returns: Interceptors to use when handling 'compact'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCompactInterceptors() -> [ServerInterceptor<Etcdserverpb_CompactionRequest, Etcdserverpb_CompactionResponse>]
}
/// To build a server, implement a class that conforms to this protocol.
public protocol Etcdserverpb_WatchProvider: CallHandlerProvider {
  var interceptors: Etcdserverpb_WatchServerInterceptorFactoryProtocol? { get }

  /// Progress requests that a watch stream progress status
  /// be sent in the watch response stream as soon as possible.
  /// For watch progress responses, the header.revision indicates progress. All future events
  /// received in this stream are guaranteed to have a higher revision number than the
  /// header.revision number.
  func progress(request: Etcdserverpb_WatchProgressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_WatchResponse>

  /// Watch watches for events happening or that have happened. Both input and output
  /// are streams; the input stream is for creating and canceling watchers and the output
  /// stream sends events. One watch RPC can watch on multiple key ranges, streaming events
  /// for several watches at once. The entire event history can be watched starting from the
  /// last compaction revision.
  func watch(context: StreamingResponseCallContext<Etcdserverpb_WatchResponse>) -> EventLoopFuture<(StreamEvent<Etcdserverpb_WatchRequest>) -> Void>
}

extension Etcdserverpb_WatchProvider {
  public var serviceName: Substring { return "etcdserverpb.Watch" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Progress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_WatchProgressRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_WatchResponse>(),
        interceptors: self.interceptors?.makeProgressInterceptors() ?? [],
        userFunction: self.progress(request:context:)
      )

    case "Watch":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_WatchRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_WatchResponse>(),
        interceptors: self.interceptors?.makeWatchInterceptors() ?? [],
        observerFactory: self.watch(context:)
      )

    default:
      return nil
    }
  }
}

public protocol Etcdserverpb_WatchServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'progress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProgressInterceptors() -> [ServerInterceptor<Etcdserverpb_WatchProgressRequest, Etcdserverpb_WatchResponse>]

  /// - Returns: Interceptors to use when handling 'watch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWatchInterceptors() -> [ServerInterceptor<Etcdserverpb_WatchRequest, Etcdserverpb_WatchResponse>]
}
/// To build a server, implement a class that conforms to this protocol.
public protocol Etcdserverpb_LeaseProvider: CallHandlerProvider {
  var interceptors: Etcdserverpb_LeaseServerInterceptorFactoryProtocol? { get }

  /// LeaseGrant creates a lease which expires if the server does not receive a keepAlive
  /// within a given time to live period. All keys attached to the lease will be expired and
  /// deleted if the lease expires. Each expired key generates a delete event in the event history.
  func leaseGrant(request: Etcdserverpb_LeaseGrantRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_LeaseGrantResponse>

  /// LeaseRevoke revokes a lease. All keys attached to the lease will expire and be deleted.
  func leaseRevoke(request: Etcdserverpb_LeaseRevokeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_LeaseRevokeResponse>

  /// LeaseKeepAlive keeps the lease alive by streaming keep alive requests from the client
  /// to the server and streaming keep alive responses from the server to the client.
  func leaseKeepAlive(context: StreamingResponseCallContext<Etcdserverpb_LeaseKeepAliveResponse>) -> EventLoopFuture<(StreamEvent<Etcdserverpb_LeaseKeepAliveRequest>) -> Void>

  /// LeaseTimeToLive retrieves lease information.
  func leaseTimeToLive(request: Etcdserverpb_LeaseTimeToLiveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_LeaseTimeToLiveResponse>
}

extension Etcdserverpb_LeaseProvider {
  public var serviceName: Substring { return "etcdserverpb.Lease" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "LeaseGrant":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_LeaseGrantRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_LeaseGrantResponse>(),
        interceptors: self.interceptors?.makeLeaseGrantInterceptors() ?? [],
        userFunction: self.leaseGrant(request:context:)
      )

    case "LeaseRevoke":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_LeaseRevokeRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_LeaseRevokeResponse>(),
        interceptors: self.interceptors?.makeLeaseRevokeInterceptors() ?? [],
        userFunction: self.leaseRevoke(request:context:)
      )

    case "LeaseKeepAlive":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_LeaseKeepAliveRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_LeaseKeepAliveResponse>(),
        interceptors: self.interceptors?.makeLeaseKeepAliveInterceptors() ?? [],
        observerFactory: self.leaseKeepAlive(context:)
      )

    case "LeaseTimeToLive":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_LeaseTimeToLiveRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_LeaseTimeToLiveResponse>(),
        interceptors: self.interceptors?.makeLeaseTimeToLiveInterceptors() ?? [],
        userFunction: self.leaseTimeToLive(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Etcdserverpb_LeaseServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'leaseGrant'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLeaseGrantInterceptors() -> [ServerInterceptor<Etcdserverpb_LeaseGrantRequest, Etcdserverpb_LeaseGrantResponse>]

  /// - Returns: Interceptors to use when handling 'leaseRevoke'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLeaseRevokeInterceptors() -> [ServerInterceptor<Etcdserverpb_LeaseRevokeRequest, Etcdserverpb_LeaseRevokeResponse>]

  /// - Returns: Interceptors to use when handling 'leaseKeepAlive'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLeaseKeepAliveInterceptors() -> [ServerInterceptor<Etcdserverpb_LeaseKeepAliveRequest, Etcdserverpb_LeaseKeepAliveResponse>]

  /// - Returns: Interceptors to use when handling 'leaseTimeToLive'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLeaseTimeToLiveInterceptors() -> [ServerInterceptor<Etcdserverpb_LeaseTimeToLiveRequest, Etcdserverpb_LeaseTimeToLiveResponse>]
}
/// To build a server, implement a class that conforms to this protocol.
public protocol Etcdserverpb_ClusterProvider: CallHandlerProvider {
  var interceptors: Etcdserverpb_ClusterServerInterceptorFactoryProtocol? { get }

  /// MemberAdd adds a member into the cluster.
  func memberAdd(request: Etcdserverpb_MemberAddRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_MemberAddResponse>

  /// MemberRemove removes an existing member from the cluster.
  func memberRemove(request: Etcdserverpb_MemberRemoveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_MemberRemoveResponse>

  /// MemberUpdate updates the member configuration.
  func memberUpdate(request: Etcdserverpb_MemberUpdateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_MemberUpdateResponse>

  /// MemberList lists all the members in the cluster.
  func memberList(request: Etcdserverpb_MemberListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_MemberListResponse>
}

extension Etcdserverpb_ClusterProvider {
  public var serviceName: Substring { return "etcdserverpb.Cluster" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "MemberAdd":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_MemberAddRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_MemberAddResponse>(),
        interceptors: self.interceptors?.makeMemberAddInterceptors() ?? [],
        userFunction: self.memberAdd(request:context:)
      )

    case "MemberRemove":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_MemberRemoveRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_MemberRemoveResponse>(),
        interceptors: self.interceptors?.makeMemberRemoveInterceptors() ?? [],
        userFunction: self.memberRemove(request:context:)
      )

    case "MemberUpdate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_MemberUpdateRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_MemberUpdateResponse>(),
        interceptors: self.interceptors?.makeMemberUpdateInterceptors() ?? [],
        userFunction: self.memberUpdate(request:context:)
      )

    case "MemberList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_MemberListRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_MemberListResponse>(),
        interceptors: self.interceptors?.makeMemberListInterceptors() ?? [],
        userFunction: self.memberList(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Etcdserverpb_ClusterServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'memberAdd'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMemberAddInterceptors() -> [ServerInterceptor<Etcdserverpb_MemberAddRequest, Etcdserverpb_MemberAddResponse>]

  /// - Returns: Interceptors to use when handling 'memberRemove'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMemberRemoveInterceptors() -> [ServerInterceptor<Etcdserverpb_MemberRemoveRequest, Etcdserverpb_MemberRemoveResponse>]

  /// - Returns: Interceptors to use when handling 'memberUpdate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMemberUpdateInterceptors() -> [ServerInterceptor<Etcdserverpb_MemberUpdateRequest, Etcdserverpb_MemberUpdateResponse>]

  /// - Returns: Interceptors to use when handling 'memberList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMemberListInterceptors() -> [ServerInterceptor<Etcdserverpb_MemberListRequest, Etcdserverpb_MemberListResponse>]
}
/// To build a server, implement a class that conforms to this protocol.
public protocol Etcdserverpb_MaintenanceProvider: CallHandlerProvider {
  var interceptors: Etcdserverpb_MaintenanceServerInterceptorFactoryProtocol? { get }

  /// Alarm activates, deactivates, and queries alarms regarding cluster health.
  func alarm(request: Etcdserverpb_AlarmRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AlarmResponse>

  /// Status gets the status of the member.
  func status(request: Etcdserverpb_StatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_StatusResponse>

  /// Defragment defragments a member's backend database to recover storage space.
  func defragment(request: Etcdserverpb_DefragmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_DefragmentResponse>

  /// Hash returns the hash of the local KV state for consistency checking purpose.
  /// This is designed for testing; do not use this in production when there
  /// are ongoing transactions.
  func hash(request: Etcdserverpb_HashRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_HashResponse>

  /// HashKV computes the hash of all MVCC keys up to a given revision.
  func hashKV(request: Etcdserverpb_HashKVRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_HashKVResponse>

  /// Snapshot sends a snapshot of the entire backend from a member over a stream to a client.
  func snapshot(request: Etcdserverpb_SnapshotRequest, context: StreamingResponseCallContext<Etcdserverpb_SnapshotResponse>) -> EventLoopFuture<GRPCStatus>

  /// MoveLeader requests current leader node to transfer its leadership to transferee.
  func moveLeader(request: Etcdserverpb_MoveLeaderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_MoveLeaderResponse>
}

extension Etcdserverpb_MaintenanceProvider {
  public var serviceName: Substring { return "etcdserverpb.Maintenance" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Alarm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AlarmRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AlarmResponse>(),
        interceptors: self.interceptors?.makeAlarmInterceptors() ?? [],
        userFunction: self.alarm(request:context:)
      )

    case "Status":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_StatusRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_StatusResponse>(),
        interceptors: self.interceptors?.makeStatusInterceptors() ?? [],
        userFunction: self.status(request:context:)
      )

    case "Defragment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_DefragmentRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_DefragmentResponse>(),
        interceptors: self.interceptors?.makeDefragmentInterceptors() ?? [],
        userFunction: self.defragment(request:context:)
      )

    case "Hash":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_HashRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_HashResponse>(),
        interceptors: self.interceptors?.makeHashInterceptors() ?? [],
        userFunction: self.hash(request:context:)
      )

    case "HashKV":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_HashKVRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_HashKVResponse>(),
        interceptors: self.interceptors?.makeHashKVInterceptors() ?? [],
        userFunction: self.hashKV(request:context:)
      )

    case "Snapshot":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_SnapshotRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_SnapshotResponse>(),
        interceptors: self.interceptors?.makeSnapshotInterceptors() ?? [],
        userFunction: self.snapshot(request:context:)
      )

    case "MoveLeader":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_MoveLeaderRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_MoveLeaderResponse>(),
        interceptors: self.interceptors?.makeMoveLeaderInterceptors() ?? [],
        userFunction: self.moveLeader(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Etcdserverpb_MaintenanceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'alarm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAlarmInterceptors() -> [ServerInterceptor<Etcdserverpb_AlarmRequest, Etcdserverpb_AlarmResponse>]

  /// - Returns: Interceptors to use when handling 'status'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStatusInterceptors() -> [ServerInterceptor<Etcdserverpb_StatusRequest, Etcdserverpb_StatusResponse>]

  /// - Returns: Interceptors to use when handling 'defragment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDefragmentInterceptors() -> [ServerInterceptor<Etcdserverpb_DefragmentRequest, Etcdserverpb_DefragmentResponse>]

  /// - Returns: Interceptors to use when handling 'hash'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHashInterceptors() -> [ServerInterceptor<Etcdserverpb_HashRequest, Etcdserverpb_HashResponse>]

  /// - Returns: Interceptors to use when handling 'hashKV'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHashKVInterceptors() -> [ServerInterceptor<Etcdserverpb_HashKVRequest, Etcdserverpb_HashKVResponse>]

  /// - Returns: Interceptors to use when handling 'snapshot'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSnapshotInterceptors() -> [ServerInterceptor<Etcdserverpb_SnapshotRequest, Etcdserverpb_SnapshotResponse>]

  /// - Returns: Interceptors to use when handling 'moveLeader'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMoveLeaderInterceptors() -> [ServerInterceptor<Etcdserverpb_MoveLeaderRequest, Etcdserverpb_MoveLeaderResponse>]
}
/// To build a server, implement a class that conforms to this protocol.
public protocol Etcdserverpb_AuthProvider: CallHandlerProvider {
  var interceptors: Etcdserverpb_AuthServerInterceptorFactoryProtocol? { get }

  /// AuthEnable enables authentication.
  func authEnable(request: Etcdserverpb_AuthEnableRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthEnableResponse>

  /// AuthDisable disables authentication.
  func authDisable(request: Etcdserverpb_AuthDisableRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthDisableResponse>

  /// Authenticate processes an authenticate request.
  func authenticate(request: Etcdserverpb_AuthenticateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthenticateResponse>

  /// UserAdd adds a new user.
  func userAdd(request: Etcdserverpb_AuthUserAddRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthUserAddResponse>

  /// UserGet gets detailed user information.
  func userGet(request: Etcdserverpb_AuthUserGetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthUserGetResponse>

  /// UserList gets a list of all users.
  func userList(request: Etcdserverpb_AuthUserListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthUserListResponse>

  /// UserDelete deletes a specified user.
  func userDelete(request: Etcdserverpb_AuthUserDeleteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthUserDeleteResponse>

  /// UserChangePassword changes the password of a specified user.
  func userChangePassword(request: Etcdserverpb_AuthUserChangePasswordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthUserChangePasswordResponse>

  /// UserGrant grants a role to a specified user.
  func userGrantRole(request: Etcdserverpb_AuthUserGrantRoleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthUserGrantRoleResponse>

  /// UserRevokeRole revokes a role of specified user.
  func userRevokeRole(request: Etcdserverpb_AuthUserRevokeRoleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthUserRevokeRoleResponse>

  /// RoleAdd adds a new role.
  func roleAdd(request: Etcdserverpb_AuthRoleAddRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthRoleAddResponse>

  /// RoleGet gets detailed role information.
  func roleGet(request: Etcdserverpb_AuthRoleGetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthRoleGetResponse>

  /// RoleList gets lists of all roles.
  func roleList(request: Etcdserverpb_AuthRoleListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthRoleListResponse>

  /// RoleDelete deletes a specified role.
  func roleDelete(request: Etcdserverpb_AuthRoleDeleteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthRoleDeleteResponse>

  /// RoleGrantPermission grants a permission of a specified key or range to a specified role.
  func roleGrantPermission(request: Etcdserverpb_AuthRoleGrantPermissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthRoleGrantPermissionResponse>

  /// RoleRevokePermission revokes a key or range permission of a specified role.
  func roleRevokePermission(request: Etcdserverpb_AuthRoleRevokePermissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Etcdserverpb_AuthRoleRevokePermissionResponse>
}

extension Etcdserverpb_AuthProvider {
  public var serviceName: Substring { return "etcdserverpb.Auth" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AuthEnable":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthEnableRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthEnableResponse>(),
        interceptors: self.interceptors?.makeAuthEnableInterceptors() ?? [],
        userFunction: self.authEnable(request:context:)
      )

    case "AuthDisable":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthDisableRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthDisableResponse>(),
        interceptors: self.interceptors?.makeAuthDisableInterceptors() ?? [],
        userFunction: self.authDisable(request:context:)
      )

    case "Authenticate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthenticateRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthenticateResponse>(),
        interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? [],
        userFunction: self.authenticate(request:context:)
      )

    case "UserAdd":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthUserAddRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthUserAddResponse>(),
        interceptors: self.interceptors?.makeUserAddInterceptors() ?? [],
        userFunction: self.userAdd(request:context:)
      )

    case "UserGet":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthUserGetRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthUserGetResponse>(),
        interceptors: self.interceptors?.makeUserGetInterceptors() ?? [],
        userFunction: self.userGet(request:context:)
      )

    case "UserList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthUserListRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthUserListResponse>(),
        interceptors: self.interceptors?.makeUserListInterceptors() ?? [],
        userFunction: self.userList(request:context:)
      )

    case "UserDelete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthUserDeleteRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthUserDeleteResponse>(),
        interceptors: self.interceptors?.makeUserDeleteInterceptors() ?? [],
        userFunction: self.userDelete(request:context:)
      )

    case "UserChangePassword":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthUserChangePasswordRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthUserChangePasswordResponse>(),
        interceptors: self.interceptors?.makeUserChangePasswordInterceptors() ?? [],
        userFunction: self.userChangePassword(request:context:)
      )

    case "UserGrantRole":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthUserGrantRoleRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthUserGrantRoleResponse>(),
        interceptors: self.interceptors?.makeUserGrantRoleInterceptors() ?? [],
        userFunction: self.userGrantRole(request:context:)
      )

    case "UserRevokeRole":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthUserRevokeRoleRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthUserRevokeRoleResponse>(),
        interceptors: self.interceptors?.makeUserRevokeRoleInterceptors() ?? [],
        userFunction: self.userRevokeRole(request:context:)
      )

    case "RoleAdd":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthRoleAddRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthRoleAddResponse>(),
        interceptors: self.interceptors?.makeRoleAddInterceptors() ?? [],
        userFunction: self.roleAdd(request:context:)
      )

    case "RoleGet":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthRoleGetRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthRoleGetResponse>(),
        interceptors: self.interceptors?.makeRoleGetInterceptors() ?? [],
        userFunction: self.roleGet(request:context:)
      )

    case "RoleList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthRoleListRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthRoleListResponse>(),
        interceptors: self.interceptors?.makeRoleListInterceptors() ?? [],
        userFunction: self.roleList(request:context:)
      )

    case "RoleDelete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthRoleDeleteRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthRoleDeleteResponse>(),
        interceptors: self.interceptors?.makeRoleDeleteInterceptors() ?? [],
        userFunction: self.roleDelete(request:context:)
      )

    case "RoleGrantPermission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthRoleGrantPermissionRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthRoleGrantPermissionResponse>(),
        interceptors: self.interceptors?.makeRoleGrantPermissionInterceptors() ?? [],
        userFunction: self.roleGrantPermission(request:context:)
      )

    case "RoleRevokePermission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Etcdserverpb_AuthRoleRevokePermissionRequest>(),
        responseSerializer: ProtobufSerializer<Etcdserverpb_AuthRoleRevokePermissionResponse>(),
        interceptors: self.interceptors?.makeRoleRevokePermissionInterceptors() ?? [],
        userFunction: self.roleRevokePermission(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Etcdserverpb_AuthServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'authEnable'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthEnableInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthEnableRequest, Etcdserverpb_AuthEnableResponse>]

  /// - Returns: Interceptors to use when handling 'authDisable'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthDisableInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthDisableRequest, Etcdserverpb_AuthDisableResponse>]

  /// - Returns: Interceptors to use when handling 'authenticate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthenticateRequest, Etcdserverpb_AuthenticateResponse>]

  /// - Returns: Interceptors to use when handling 'userAdd'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserAddInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthUserAddRequest, Etcdserverpb_AuthUserAddResponse>]

  /// - Returns: Interceptors to use when handling 'userGet'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserGetInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthUserGetRequest, Etcdserverpb_AuthUserGetResponse>]

  /// - Returns: Interceptors to use when handling 'userList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserListInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthUserListRequest, Etcdserverpb_AuthUserListResponse>]

  /// - Returns: Interceptors to use when handling 'userDelete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserDeleteInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthUserDeleteRequest, Etcdserverpb_AuthUserDeleteResponse>]

  /// - Returns: Interceptors to use when handling 'userChangePassword'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserChangePasswordInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthUserChangePasswordRequest, Etcdserverpb_AuthUserChangePasswordResponse>]

  /// - Returns: Interceptors to use when handling 'userGrantRole'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserGrantRoleInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthUserGrantRoleRequest, Etcdserverpb_AuthUserGrantRoleResponse>]

  /// - Returns: Interceptors to use when handling 'userRevokeRole'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserRevokeRoleInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthUserRevokeRoleRequest, Etcdserverpb_AuthUserRevokeRoleResponse>]

  /// - Returns: Interceptors to use when handling 'roleAdd'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRoleAddInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthRoleAddRequest, Etcdserverpb_AuthRoleAddResponse>]

  /// - Returns: Interceptors to use when handling 'roleGet'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRoleGetInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthRoleGetRequest, Etcdserverpb_AuthRoleGetResponse>]

  /// - Returns: Interceptors to use when handling 'roleList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRoleListInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthRoleListRequest, Etcdserverpb_AuthRoleListResponse>]

  /// - Returns: Interceptors to use when handling 'roleDelete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRoleDeleteInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthRoleDeleteRequest, Etcdserverpb_AuthRoleDeleteResponse>]

  /// - Returns: Interceptors to use when handling 'roleGrantPermission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRoleGrantPermissionInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthRoleGrantPermissionRequest, Etcdserverpb_AuthRoleGrantPermissionResponse>]

  /// - Returns: Interceptors to use when handling 'roleRevokePermission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRoleRevokePermissionInterceptors() -> [ServerInterceptor<Etcdserverpb_AuthRoleRevokePermissionRequest, Etcdserverpb_AuthRoleRevokePermissionResponse>]
}
